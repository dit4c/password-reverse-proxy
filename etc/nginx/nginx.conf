daemon off;
user  nobody;
worker_processes  1;

env UPSTREAM_HOST;
env UPSTREAM_PORT;
env PASSWORD_SECRET;

error_log /dev/stdout debug;

events {
  worker_connections  1024;
}

http {
  access_log /dev/stdout;
  include       mime.types;
  default_type  application/octet-stream;

  sendfile        on;

  keepalive_timeout  65;

  client_max_body_size 100G;
  proxy_buffering off;
  proxy_request_buffering off;

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  map $http_x_forwarded_proto $user_proto {
    default $http_x_forwarded_proto;
    '' $scheme;
  }

  lua_shared_dict sessions 1m;

  server {
    include /dev/shm/nginx_listen.conf;
    server_name  _;

    error_page   403  @login_page;
    error_page   500 502 503 504  /50x.html;

    set $session_cookie_name "SESSION";
    set $flash_cookie_name "FLASH";

    set_by_lua_block $password_secret {
      return os.getenv("PASSWORD_SECRET");
    }

    location / {
      set $flash_message '';
      set_secure_random_alphanum $new_session_id 32;
      set_by_lua_block $upstream_host {
        return os.getenv("UPSTREAM_HOST");
      }
      set_by_lua_block $upstream_port {
        return os.getenv("UPSTREAM_PORT");
      }
      access_by_lua_block {
        local session_id = ngx.var['cookie_' .. ngx.var.session_cookie_name]
        if ngx.shared.sessions:get(session_id) then
          return
        else
          local method = ngx.req.get_method()
          if method == "GET" or method == "HEAD" then
            return ngx.exec('@login_page')
          else
            -- Read body
            ngx.req.read_body()
            if ngx.var.http_content_type:find("application/x-www-form-urlencoded", 1, true) ~= nil then
              ngx.req.read_body()
              local args = ngx.req.get_post_args()
              if args["password"] == ngx.var.password_secret then
                -- Add session cookie
                ngx.shared.sessions:set(ngx.var.new_session_id, true)
                local cookie = ngx.var.session_cookie_name .. "=" .. ngx.var.new_session_id
                ngx.header['Set-Cookie'] = { cookie .. '; path=/' }
                -- Avoid 405 Not Allowed by telling nginx this is a GET
                ngx.req.set_method(ngx.HTTP_GET)
                return
              else
                -- Avoid 405 Not Allowed by telling nginx this is a GET
                ngx.req.set_method(ngx.HTTP_GET)
                ngx.var.flash_message = "Incorrect password"
              end
            end
            return ngx.exit(ngx.HTTP_FORBIDDEN)
          end
        end
      }
      proxy_pass http://$upstream_host:$upstream_port;
      proxy_http_version 1.1;
      proxy_read_timeout 1d; # Allow websockets to idle
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header X-Forwarded-Proto $user_proto;
      proxy_set_header X-Forwarded-Host $http_host;
    }

    location @login_page {
      internal;
      root /etc/nginx;
      default_type text/html;
      add_header Set-Cookie "$session_cookie_name=; path=/";
      add_header Cache-Control "no-store";
      body_filter_by_lua_block {
        local data, eof = ngx.arg[1], ngx.arg[2]
        if ngx.var.flash_message ~= nil and ngx.var.flash_message ~= "" then
          ngx.log(ngx.INFO, ngx.var.flash_message)
          ngx.arg[1] = data:gsub("{{flash_message}}", ngx.var.flash_message)
        else
          ngx.arg[1] = data:gsub("{{flash_message}}", "")
        end
      }
      try_files /login.html =404;
    }

    location = /50x.html {
      root   html;
    }

  }

}
